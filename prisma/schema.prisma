// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName   String
  lastName    String
  email       String @unique
  hash        String
  userRefCode String @unique

  student Student[]
  parent  Parent[]
  gradebook GradeBook[]

  @@map("users")
}

model Parent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName String
  lastName  String

  email String? @unique
  phone String  @unique

  userId String
  user   User   @relation(fields: [userId], references: [userRefCode])

  student Student[]

  @@map("parents")
}

model Student {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName      String
  lastName       String
  studentRefCode String  @unique
  email          String? @unique
  phone          String?

  userId String
  user   User   @relation(fields: [userId], references: [userRefCode])

  parent_id Int
  parent    Parent @relation(fields: [parent_id], references: [id])

  subject GradeBook[]

  @@map("students")
}

model Subject {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @unique

  student GradeBook[]

  @@map("Subjects")
}

model GradeBook {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student    Student @relation(fields: [studentRef], references: [studentRefCode])
  studentRef String

  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId Int

  userId String
  user User @relation(fields: [userId], references: [userRefCode])

  grade Float?

  @@id([studentRef, subjectId])
}